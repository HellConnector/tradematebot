---
interface Props {
  spentValue: number;
  currentValue: number;
  profit: number;
  currency: string;
  nameFilter?: string;
  showSearch?: boolean;
  showSortButtons?: boolean;
}

const {
  spentValue,
  currentValue,
  profit,
  currency,
  nameFilter = "",
  showSearch = true,
  showSortButtons = true,
} = Astro.props;
---

<header class="portfolio-summary-header">
  <div class="summary-container">
    <div class="summary-item">
      <div class="summary-label">Spent</div>
      <div class="summary-value">
        {spentValue.toFixed(2)}
        {currency}
      </div>
    </div>
    <div class="summary-item">
      <div class="summary-label">Current</div>
      <div class="summary-value">
        {currentValue.toFixed(2)}
        {currency}
      </div>
    </div>
    <div class="summary-item">
      <div class="summary-label">Profit</div>
      <div
        class={`summary-value ${profit >= 0 ? "profit-positive" : "profit-negative"}`}
      >
        {(profit >= 0 ? "+" : "") + profit.toFixed(2) + " " + currency}
      </div>
    </div>
  </div>
  {
    (showSearch || showSortButtons) && (
      <div class="portfolio-header-actions">
        {showSearch && (
          <div class="search-input-container">
            <input
              type="text"
              id="portfolio-search"
              class="telegram-search-input"
              placeholder="Type item name"
              autocomplete="off"
              value={nameFilter}
            />
            <div class="search-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <circle cx="11" cy="11" r="8" />
                <line x1="21" y1="21" x2="16.65" y2="16.65" />
              </svg>
            </div>
            <div
              class="clear-icon"
              id="clear-search"
              style={nameFilter ? "display: flex;" : "display: none"}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="18" />
              </svg>
            </div>
          </div>
        )}
        {showSortButtons && (
          <div class="sort-buttons-container">
            <button
              id="sort-percentage-button"
              class="sort-type-button active"
              title="Sort by percentage"
              data-sort-by="percentage"
            >
              %
            </button>
            <button
              id="sort-value-button"
              class="sort-type-button"
              title="Sort by value"
              data-sort-by="value"
            >
              {currency}
            </button>
            <button
              id="sort-count-button"
              class="sort-type-button"
              title="Sort by count"
              data-sort-by="count"
            >
              â„–
            </button>
            <button
              id="sort-direction-button"
              class="sort-direction-button"
              title="Toggle sort direction"
            >
              <div class="sort-lines-container">
                <div class="sort-line sort-line-long" />
                <div class="sort-line sort-line-medium-long" />
                <div class="sort-line sort-line-medium" />
                <div class="sort-line sort-line-medium-short" />
                <div class="sort-line sort-line-short" />
              </div>
            </button>
          </div>
        )}
      </div>
    )
  }
</header>

<script>
  window.initializeFilter = function () {
    const searchInput = document.getElementById("portfolio-search");
    const clearButton = document.getElementById("clear-search");
    const portfolioItems = document.querySelectorAll(".portfolio-item");

    function filterItems(query) {
      const queryWords = query
        .toLowerCase()
        .trim()
        .split(/\s+/)
        .filter((word) => word.length > 0);

      portfolioItems.forEach((item) => {
        const itemNameElement = item.querySelector(".clickable-item-name");
        if (!itemNameElement) return;

        const itemName = itemNameElement.textContent?.toLowerCase();

        const shouldDisplay =
          queryWords.length === 0 ||
          queryWords.every((word) => itemName?.includes(word));

        item.style.display = shouldDisplay ? "" : "none";
      });
    }

    searchInput?.addEventListener("input", () => {
      if (searchInput?.value.trim() !== "") {
        clearButton.style.display = "flex";
      } else {
        clearButton.style.display = "none";
      }
      filterItems(searchInput.value);
    });

    clearButton?.addEventListener("click", () => {
      searchInput.value = "";
      clearButton.style.display = "none";
      filterItems("");
    });
  };

  window.initializeSort = function () {
    const sortDirectionButton = document.getElementById(
      "sort-direction-button",
    );
    const sortPercentageButton = document.getElementById(
      "sort-percentage-button",
    );
    const sortValueButton = document.getElementById("sort-value-button");
    const sortCountButton = document.getElementById("sort-count-button");
    const portfolioItems = document.querySelectorAll(".portfolio-item");
    const portfolioItemsContainer = document.querySelector(".portfolio-items");

    let currentSortBy = "percentage";
    let isAscending = false;

    function sortPortfolioItems(sortBy, ascending = false) {
      const selectors = {
        percentage: ".income-percentage",
        count: ".item-quantity-badge",
        value: ".income-amount",
      };
      const selector = selectors[sortBy] || selectors.value;
      const itemsArray = Array.from(portfolioItems);

      itemsArray.sort((a, b) => {
        const valueA =
          parseFloat(a.querySelector(selector)?.dataset.value) || 0;
        const valueB =
          parseFloat(b.querySelector(selector)?.dataset.value) || 0;

        return ascending ? valueA - valueB : valueB - valueA;
      });

      itemsArray.forEach((item) => portfolioItemsContainer?.appendChild(item));
    }

    function updateActiveSortButton(sortBy) {
      const sortButtons = {
        percentage: sortPercentageButton,
        value: sortValueButton,
        count: sortCountButton,
      };

      Object.values(sortButtons).forEach((button) =>
        button?.classList.remove("active"),
      );

      sortButtons[sortBy]?.classList.add("active");
    }

    sortDirectionButton?.addEventListener("click", () => {
      isAscending = !isAscending;
      if (isAscending) {
        sortDirectionButton.classList.add("asc");
      } else {
        sortDirectionButton.classList.remove("asc");
      }
      sortPortfolioItems(currentSortBy, isAscending);
    });

    sortPercentageButton?.addEventListener("click", () => {
      currentSortBy = "percentage";
      updateActiveSortButton(currentSortBy);
      sortPortfolioItems(currentSortBy, isAscending);
    });

    sortValueButton?.addEventListener("click", () => {
      currentSortBy = "value";
      updateActiveSortButton(currentSortBy);
      sortPortfolioItems(currentSortBy, isAscending);
    });

    sortCountButton?.addEventListener("click", () => {
      currentSortBy = "count";
      updateActiveSortButton(currentSortBy);
      sortPortfolioItems(currentSortBy, isAscending);
    });
  };

  // Initialize filter and sort if they exist on the page
  if (document.getElementById("portfolio-search")) {
    window.initializeFilter();
  }

  if (document.getElementById("sort-percentage-button")) {
    window.initializeSort();
  }
</script>
