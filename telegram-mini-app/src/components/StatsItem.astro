---
interface Props {
  itemName: string;
  imageUrl: string;
  holdDays: number;
  leftCount: number;
  buyCount: number;
  avgBuyPrice: number;
  spentByItem: number;
  sellCount: number;
  avgSellPrice: number;
  earnedByItem: number;
  incomeAbs: number;
  incomePrc: number;
  currency: string;
  style?: string;
}

const {
  itemName,
  imageUrl,
  holdDays,
  leftCount,
  buyCount,
  avgBuyPrice,
  spentByItem,
  sellCount,
  avgSellPrice,
  earnedByItem,
  incomeAbs,
  incomePrc,
  currency,
  style = "",
} = Astro.props;
---

<div class="portfolio-item" style={style}>
  <div class="item-header">
    <h3
      hx-get=`/partials/portfolio-item/${encodeURIComponent(itemName)}`
      hx-target="#item-details-container"
      hx-trigger="click"
      hx-on:click="showDrawer()"
      class="clickable-item-name"
    >
      {itemName}
    </h3>
    <div
      class={`item-quantity-badge ${leftCount < 10 ? "single-digit" : ""}`}
      data-value={leftCount}
    >
      {leftCount}
    </div>
  </div>
  <div class="item-details">
    <div class="item-image-container">
      <img class="item-image" src={imageUrl} alt={itemName} />
    </div>
    <div class="item-price-info">
      <div class="item-detail">
        <span class="detail-label">Buy Price:</span>
        <span class="detail-value"
          >{avgBuyPrice}
          {currency}<span class="drawer-deal-volume">x{buyCount}</span></span
        >
      </div>
      <div class="item-detail">
        <span class="detail-label">Sell Price:</span>
        <span class="detail-value"
          >{avgSellPrice}
          {currency}<span class="drawer-deal-volume">x{sellCount}</span></span
        >
      </div>
    </div>
    <div class="item-profit-info">
      <div class="item-detail">
        <span class="detail-label">Profit %:</span>
        <span
          class={`detail-value income-percentage ${incomePrc >= 0 ? "profit-positive" : "profit-negative"}`}
          data-value={incomePrc}
        >
          {incomePrc >= 0 ? "+" : ""}{incomePrc}%
        </span>
      </div>
      <div class="item-detail">
        <span class="detail-label">Profit:</span>
        <span
          class={`detail-value income-amount ${incomeAbs >= 0 ? "profit-positive" : "profit-negative"}`}
          data-value={incomeAbs}
        >
          {incomeAbs >= 0 ? "+" : ""}{incomeAbs}
          {currency}
        </span>
      </div>
    </div>
  </div>
</div>

<script>
  window.showDrawer = function () {
    const drawerContent = document.getElementById("drawer-content");
    if (drawerContent) {
      drawerContent.scrollTop = 0;
    }

    const drawer = document.getElementById("drawer");

    if (!drawer?.classList.contains("open")) {
      const scrollY = window.scrollY;

      document.body.style.position = "fixed";
      document.body.style.top = `-${scrollY}px`;
      document.body.style.width = "100%";

      document.body.dataset.scrollY = scrollY;

      document.getElementById("overlay")?.classList.add("active");
      if (window.app.isVerticalSwipesEnabled) {
        window.app.disableVerticalSwipes();
      }
    }
    window.app.SecondaryButton.setText("Hide");
    window.app.SecondaryButton.onClick(window.hideDrawer);
    if (!window.app.SecondaryButton.isVisible) {
      window.app.SecondaryButton.show();
    }
  };

  window.hideDrawer = function () {
    if (document.activeElement instanceof HTMLElement) {
      document.activeElement.blur();
    }

    if (window.app.SecondaryButton.isVisible) {
      window.app.SecondaryButton.hide();
      window.app.SecondaryButton.offClick();
    }
    document.getElementById("drawer")?.classList.remove("open");
    document.getElementById("overlay")?.classList.remove("active");

    const scrollY = document.body.dataset.scrollY;
    document.body.style.position = "";
    document.body.style.top = "";
    document.body.style.width = "";
    window.scrollTo(0, parseInt(scrollY || "0"));

    if (!window.app.isVerticalSwipesEnabled) {
      window.app.enableVerticalSwipes();
    }
  };
</script>
