---
import { catchError } from "../../utils";
import PortfolioItem from "../../components/PortfolioItem.astro";
import SummaryHeader from "../../components/SummaryHeader.astro";

export const partial = true;
const authorization = Astro.request.headers.get("Authorization");

const { env } = Astro.locals.runtime;

if (!authorization) {
  return Astro.redirect("/outside-telegram/");
}

const [error, response] = await catchError(
  fetch(`${env.MINI_APP_API_URL}/portfolio/`, {
    headers: {
      Authorization: authorization,
    },
  }),
);

let portfolioSummary = null;

if (error) {
  console.error("Error fetching portfolio:", error);
} else if (response.ok) {
  try {
    portfolioSummary = await response.json();
  } catch (e) {
    console.error("Failed to parse portfolio data:", e);
  }
}

let nameFilter = Astro.url.searchParams.get("name") || "";

if (portfolioSummary && portfolioSummary.items) {
  nameFilter = portfolioSummary.items
    .map((item) => item.name)
    .includes(nameFilter)
    ? nameFilter
    : "";
}
---

<div class="portfolio-container">
  {
    portfolioSummary ? (
      <>
        <SummaryHeader
          spentValue={portfolioSummary.spentValue}
          currentValue={portfolioSummary.currentValue}
          profit={portfolioSummary.profit}
          currency={portfolioSummary.items[0].currency}
          nameFilter={nameFilter}
          showSearch={true}
          showSortButtons={true}
        />
        <div class="portfolio-items">
          {portfolioSummary.items.map((item) => {
            const shouldHide = nameFilter && !(item.name === nameFilter);
            return (
              <PortfolioItem
                name={item.name}
                count={item.count}
                imageUrl={item.imageUrl}
                buyPrice={item.buyPrice}
                currentPrice={item.currentPrice}
                currency={item.currency}
                incomePercentage={item.incomePercentage}
                incomeAmount={item.incomeAmount}
                style={shouldHide ? "display: none;" : ""}
              />
            );
          })}
        </div>
        <div id="overlay" class="overlay" onclick="handleOverlayClick();" />
        <div id="center-spinner" class="center-spinner">
          <div class="spinner" />
        </div>
        <div id="drawer" class="bottom-drawer">
          <div class="drawer-handle" onclick="hideDrawer();" />
          <div id="drawer-content">
            <div id="item-details-container" />
          </div>
        </div>
      </>
    ) : (
      <>
        <div class="empty-portfolio">
          <p>
            Your portfolio is empty. Start adding deals to track your
            investments!
          </p>
        </div>
        <div class="down-arrow">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="60"
            height="60"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="3"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="12" y1="5" x2="12" y2="19" />
            <polyline points="19 12 12 19 5 12" />
          </svg>
        </div>
      </>
    )
  }
</div>

<script>
  window.app.MainButton.setText("Add deal");
  window.app.MainButton.onClick(() => {
    const drawer = document.getElementById("drawer");
    const itemName = drawer?.classList.contains("open")
      ? drawer.querySelector("h2[class='drawer-item-title']")?.textContent
      : null;
    const urlPath = itemName
      ? `/add-deal/?name=${encodeURIComponent(itemName)}`
      : "/add-deal/";
    window.historyManager.goToUrl(urlPath);
  });
  window.app.MainButton.color = "rgb(49, 181, 69)";
  window.app.MainButton.show();

  window.app.MainButton.hasShineEffect =
    !!document.querySelector(".empty-portfolio");

  window.handleOverlayClick = function () {
    const isItemDetailsDrawerOpen = document
      .getElementById("drawer")
      ?.classList.contains("open");

    if (isItemDetailsDrawerOpen) {
      window.hideDrawer();
    }
  };

  document.body.addEventListener("htmx:beforeRequest", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      evt.detail.target.innerHTML = "";
      document.getElementById("center-spinner")?.classList.add("active");
    }
  });

  function resetDrawerState() {
    document.getElementById("overlay")?.classList.remove("active");
    document.getElementById("center-spinner")?.classList.remove("active");
    if (window.app.isVerticalSwipesEnabled === false) {
      window.app.enableVerticalSwipes();
    }
    const scrollY = document.body.dataset.scrollY;
    document.body.style.position = "";
    document.body.style.top = "";
    document.body.style.width = "";
    window.scrollTo(0, parseInt(scrollY || "0"));
  }

  document.body.addEventListener("htmx:afterRequest", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      document.getElementById("center-spinner")?.classList.remove("active");
      const drawer = document.getElementById("drawer");
      if (drawer && !drawer.classList.contains("open")) {
        if (
          evt.detail.successful &&
          evt.detail.target.innerHTML.trim() !== ""
        ) {
          drawer.classList.add("open");
        } else {
          resetDrawerState();
        }
      }
    }
  });

  document.body.addEventListener("htmx:timeout", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      resetDrawerState();
    }
  });

  document.body.addEventListener("htmx:abort", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      resetDrawerState();
    }
  });
</script>
