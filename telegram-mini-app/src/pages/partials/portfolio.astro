---
import { catchError } from "../../utils";
import PortfolioItem from "../../components/PortfolioItem.astro";

export const partial = true;
const authorization = Astro.request.headers.get("Authorization");

const { env } = Astro.locals.runtime;

if (!authorization) {
  return Astro.redirect("/outside-telegram/");
}

const nameFilter = Astro.url.searchParams.get("name") || "";

const [error, response] = await catchError(
  fetch(`${env.MINI_APP_API_URL}/portfolio/`, {
    headers: {
      Authorization: authorization,
    },
  }),
);

let portfolioSummary = null;

if (error) {
  console.error("Error fetching portfolio:", error);
} else if (response.ok) {
  try {
    portfolioSummary = await response.json();
  } catch (e) {
    console.error("Failed to parse portfolio data:", e);
  }
}
---

<div class="portfolio-container">
  {
    portfolioSummary ? (
      <>
        <header class="portfolio-summary-header">
          <div class="summary-container">
            <div class="summary-item">
              <div class="summary-label">Spent</div>
              <div class="summary-value">
                {portfolioSummary.spentValue.toFixed(2)}{" "}
                {portfolioSummary.items[0].currency}
              </div>
            </div>
            <div class="summary-item">
              <div class="summary-label">Current</div>
              <div class="summary-value">
                {portfolioSummary.currentValue.toFixed(2)}{" "}
                {portfolioSummary.items[0].currency}
              </div>
            </div>
            <div class="summary-item">
              <div class="summary-label">Profit</div>
              <div
                class={`summary-value ${portfolioSummary.profit >= 0 ? "profit-positive" : "profit-negative"}`}
              >
                {(portfolioSummary.profit >= 0 ? "+" : "") +
                  portfolioSummary.profit.toFixed(2) +
                  " " +
                  portfolioSummary.items[0].currency}
              </div>
            </div>
          </div>
          <div class="portfolio-header-actions">
            <div class="search-input-container">
              <input
                type="text"
                id="portfolio-search"
                class="telegram-search-input"
                placeholder="Type item name"
                autocomplete="off"
                value={nameFilter}
              />
              <div class="search-icon">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <circle cx="11" cy="11" r="8" />
                  <line x1="21" y1="21" x2="16.65" y2="16.65" />
                </svg>
              </div>
              <div
                class="clear-icon"
                id="clear-search"
                style={nameFilter ? "display: flex;" : "display: none"}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <line x1="18" y1="6" x2="6" y2="18" />
                  <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
              </div>
            </div>
            <div class="sort-buttons-container">
              <button
                id="sort-percentage-button"
                class="sort-type-button active"
                title="Sort by percentage"
                data-sort-by="percentage"
              >
                %
              </button>
              <button
                id="sort-value-button"
                class="sort-type-button"
                title="Sort by value"
                data-sort-by="value"
              >
                {portfolioSummary.items[0].currency}
              </button>
              <button
                id="sort-count-button"
                class="sort-type-button"
                title="Sort by count"
                data-sort-by="count"
              >
                â„–
              </button>
              <button
                id="sort-direction-button"
                class="sort-direction-button"
                title="Toggle sort direction"
              >
                <div class="sort-lines-container">
                  <div class="sort-line sort-line-long" />
                  <div class="sort-line sort-line-medium-long" />
                  <div class="sort-line sort-line-medium" />
                  <div class="sort-line sort-line-medium-short" />
                  <div class="sort-line sort-line-short" />
                </div>
              </button>
            </div>
          </div>
        </header>
        <div class="portfolio-items">
          {portfolioSummary.items.map((item) => {
            const shouldHide = nameFilter && !(item.name === nameFilter);
            return (
              <PortfolioItem
                name={item.name}
                count={item.count}
                imageUrl={item.imageUrl}
                buyPrice={item.buyPrice}
                currentPrice={item.currentPrice}
                currency={item.currency}
                incomePercentage={item.incomePercentage}
                incomeAmount={item.incomeAmount}
                style={shouldHide ? "display: none;" : ""}
              />
            );
          })}
        </div>
        <div id="overlay" class="overlay" onclick="handleOverlayClick();" />
        <div id="center-spinner" class="center-spinner">
          <div class="spinner" />
        </div>
        <div id="drawer" class="bottom-drawer">
          <div class="drawer-handle" onclick="hideDrawer();" />
          <div id="drawer-content">
            <div id="item-details-container" />
          </div>
        </div>
      </>
    ) : (
      <>
        <div class="empty-portfolio">
          <p>
            Your portfolio is empty. Start adding deals to track your
            investments!
          </p>
        </div>
        <div class="down-arrow">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="60"
            height="60"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="3"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="12" y1="5" x2="12" y2="19" />
            <polyline points="19 12 12 19 5 12" />
          </svg>
        </div>
      </>
    )
  }
</div>

<script>
  window.initializeFilter = function () {
    const searchInput = document.getElementById("portfolio-search");
    const clearButton = document.getElementById("clear-search");
    const portfolioItems = document.querySelectorAll(".portfolio-item");

    function filterItems(query) {
      const queryWords = query
        .toLowerCase()
        .trim()
        .split(/\s+/)
        .filter((word) => word.length > 0);

      portfolioItems.forEach((item) => {
        const itemNameElement = item.querySelector(".clickable-item-name");
        if (!itemNameElement) return;

        const itemName = itemNameElement.textContent?.toLowerCase();

        const shouldDisplay =
          queryWords.length === 0 ||
          queryWords.every((word) => itemName?.includes(word));

        item.style.display = shouldDisplay ? "" : "none";
      });
    }

    searchInput?.addEventListener("input", () => {
      if (searchInput?.value.trim() !== "") {
        clearButton.style.display = "flex";
      } else {
        clearButton.style.display = "none";
      }
      filterItems(searchInput.value);
    });

    clearButton?.addEventListener("click", () => {
      searchInput.value = "";
      clearButton.style.display = "none";
      filterItems("");
    });
  };

  window.initializeFilter();

  window.initializeSort = function () {
    const sortDirectionButton = document.getElementById(
      "sort-direction-button",
    );
    const sortPercentageButton = document.getElementById(
      "sort-percentage-button",
    );
    const sortValueButton = document.getElementById("sort-value-button");
    const sortCountButton = document.getElementById("sort-count-button");
    const portfolioItems = document.querySelectorAll(".portfolio-item");
    const portfolioItemsContainer = document.querySelector(".portfolio-items");

    let currentSortBy = "percentage";
    let isAscending = false;

    function sortPortfolioItems(sortBy, ascending = false) {
      const selectors = {
        percentage: ".income-percentage",
        count: ".item-quantity-badge",
        value: ".income-amount",
      };
      const selector = selectors[sortBy] || selectors.value;
      const itemsArray = Array.from(portfolioItems);

      itemsArray.sort((a, b) => {
        const valueA =
          parseFloat(a.querySelector(selector)?.dataset.value) || 0;
        const valueB =
          parseFloat(b.querySelector(selector)?.dataset.value) || 0;

        return ascending ? valueA - valueB : valueB - valueA;
      });

      itemsArray.forEach((item) => portfolioItemsContainer?.appendChild(item));
    }

    function updateActiveSortButton(sortBy) {
      const sortButtons = {
        percentage: sortPercentageButton,
        value: sortValueButton,
        count: sortCountButton,
      };

      Object.values(sortButtons).forEach((button) =>
        button?.classList.remove("active"),
      );

      sortButtons[sortBy]?.classList.add("active");
    }

    sortDirectionButton?.addEventListener("click", () => {
      isAscending = !isAscending;
      if (isAscending) {
        sortDirectionButton.classList.add("asc");
      } else {
        sortDirectionButton.classList.remove("asc");
      }
      sortPortfolioItems(currentSortBy, isAscending);
    });

    sortPercentageButton?.addEventListener("click", () => {
      currentSortBy = "percentage";
      updateActiveSortButton(currentSortBy);
      sortPortfolioItems(currentSortBy, isAscending);
    });

    sortValueButton?.addEventListener("click", () => {
      currentSortBy = "value";
      updateActiveSortButton(currentSortBy);
      sortPortfolioItems(currentSortBy, isAscending);
    });

    sortCountButton?.addEventListener("click", () => {
      currentSortBy = "count";
      updateActiveSortButton(currentSortBy);
      sortPortfolioItems(currentSortBy, isAscending);
    });
  };

  window.initializeSort();

  window.app.BackButton.hide();

  window.app.MainButton.setText("Add deal");
  window.app.MainButton.onClick(() => {
    const drawer = document.getElementById("drawer");
    const itemName = drawer?.classList.contains("open")
      ? drawer.querySelector("h2[class='drawer-item-title']")?.textContent
      : null;

    window.location.href = itemName
      ? `/add-deal/?name=${encodeURIComponent(itemName)}`
      : "/add-deal/";
  });
  window.app.MainButton.color = "rgb(49, 181, 69)";
  window.app.MainButton.show();

  window.app.MainButton.hasShineEffect =
    !!document.querySelector(".empty-portfolio");

  window.handleOverlayClick = function () {
    const isItemDetailsDrawerOpen = document
      .getElementById("drawer")
      ?.classList.contains("open");

    if (isItemDetailsDrawerOpen) {
      window.hideDrawer();
    }
  };

  document.body.addEventListener("htmx:beforeRequest", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      evt.detail.target.innerHTML = "";
      document.getElementById("center-spinner")?.classList.add("active");
    }
  });

  function resetDrawerState() {
    document.getElementById("overlay")?.classList.remove("active");
    document.getElementById("center-spinner")?.classList.remove("active");
    if (window.app.isVerticalSwipesEnabled === false) {
      window.app.enableVerticalSwipes();
    }
    const scrollY = document.body.dataset.scrollY;
    document.body.style.position = "";
    document.body.style.top = "";
    document.body.style.width = "";
    window.scrollTo(0, parseInt(scrollY || "0"));
  }

  document.body.addEventListener("htmx:afterRequest", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      document.getElementById("center-spinner")?.classList.remove("active");
      const drawer = document.getElementById("drawer");
      if (drawer && !drawer.classList.contains("open")) {
        if (
          evt.detail.successful &&
          evt.detail.target.innerHTML.trim() !== ""
        ) {
          drawer.classList.add("open");
        } else {
          resetDrawerState();
        }
      }
    }
  });

  document.body.addEventListener("htmx:timeout", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      resetDrawerState();
    }
  });

  document.body.addEventListener("htmx:abort", function (evt) {
    if (evt.detail.target.id === "item-details-container") {
      resetDrawerState();
    }
  });
</script>
